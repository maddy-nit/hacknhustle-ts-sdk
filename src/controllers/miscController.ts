/**
 * HackNHustle ION-DIDLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateSignRequest,
  createSignRequestSchema,
} from '../models/createSignRequest';
import {
  JsonCompareRequest,
  jsonCompareRequestSchema,
} from '../models/jsonCompareRequest';
import { QRCodeRequest, qRCodeRequestSchema } from '../models/qRCodeRequest';
import {
  VerifySignRequest,
  verifySignRequestSchema,
} from '../models/verifySignRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class MiscController extends BaseController {
  /**
   * @return Response from the API call
   */
  async createDid(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/create-did');
    return req.call(requestOptions);
  }

  /**
   * @param did
   * @return Response from the API call
   */
  async resolveDid(
    did: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/resolve-did');
    const mapped = req.prepareArgs({ did: [did, string()] });
    req.query('did', mapped.did);
    return req.call(requestOptions);
  }

  /**
   * @param signature
   * @param body
   * @return Response from the API call
   */
  async verifySign(
    signature: string,
    body: VerifySignRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/verify-signature');
    const mapped = req.prepareArgs({
      signature: [signature, string()],
      body: [body, verifySignRequestSchema],
    });
    req.query('signature', mapped.signature);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createSign(
    body: CreateSignRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/create-signature');
    const mapped = req.prepareArgs({ body: [body, createSignRequestSchema] });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param signature
   * @return Response from the API call
   */
  async signatureParser(
    signature: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/signature-parser');
    const mapped = req.prepareArgs({ signature: [signature, string()] });
    req.query('signature', mapped.signature);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async jsonCompare(
    body: JsonCompareRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/json-compare');
    const mapped = req.prepareArgs({ body: [body, jsonCompareRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async qRCode(
    body: QRCodeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/qr-code');
    const mapped = req.prepareArgs({ body: [body, qRCodeRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.call(requestOptions);
  }
}
